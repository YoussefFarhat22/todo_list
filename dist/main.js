(()=>{"use strict";class t{constructor(t,e,s,i){this.title=t,this.description=e,this.dueDate=s,this.priority=i}getTodoTile(){return this.title}setTitle(t){this.title=t}setDescription(t){this.description=t}setDueDate(t){this.dueDate=t}setPriority(t){this.priority=t}}class e{constructor(){this.tasks=[]}addTodo(t){this.tasks.push(t)}getTasksList(){console.log(this.tasks)}deleteTodo(t){return this.tasks.filter((e=>e.title!==t.title))}}class s{constructor(){this.todoList=new e,this.dialog=document.querySelector("dialog"),this.form=document.querySelector("form"),this.close=document.querySelector(".close"),this.addBtn=document.getElementById("add-task"),this.addBtn.addEventListener("click",(()=>{this.handleForm()})),this.close.addEventListener("click",(t=>{t.preventDefault(),this.dialog.close()})),this.form.addEventListener("submit",(t=>{t.preventDefault(),this.addTodo()}))}handleForm(){this.dialog.showModal()}addTodo(){const e=document.getElementById("title").value,s=document.getElementById("dueDate").value,i=new t(e,"lorem",s,"urgent");this.todoList.addTodo(i),this.todoList.getTasksList(),this.createTaskCards(i.title,i.dueDate),this.dialog.close()}createTaskCards(t,e){const s=document.createElement("div");s.style.display="flex",s.style.gap="30px",s.innerHTML=`\n      <p>${t}</p>\n      <p>${e}</p>\n    `,document.querySelector(".tasks-content").appendChild(s)}}document.addEventListener("DOMContentLoaded",(()=>{new s}))})();